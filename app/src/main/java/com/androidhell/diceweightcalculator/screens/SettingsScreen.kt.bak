package com.androidhell.diceweightcalculator.screens

import android.annotation.SuppressLint
import android.util.Log
import androidx.appcompat.app.AppCompatDelegate
import androidx.compose.foundation.isSystemInDarkTheme
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Settings
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.RadioButton
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.runtime.Composable
import androidx.compose.runtime.MutableState
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.androidhell.diceweightcalculator.ui.theme.DiceWeightCalculatorTheme

@OptIn(ExperimentalMaterial3Api::class)
@SuppressLint("UnusedMaterial3ScaffoldPaddingParameter")
@Composable
fun SettingsScreen(navController: NavController) {
    val themeState = remember { mutableStateOf(ThemeMode.System) }

    val systemInDarkMode = isSystemInDarkTheme()

    DiceWeightCalculatorTheme {
        Surface(
            modifier = Modifier.fillMaxSize(),
            color = MaterialTheme.colorScheme.background
        ) {
            Scaffold(
                topBar = {
                    TopAppBar(
                        title = {
                            Text(text = "Settings")
                        },
                        navigationIcon = {
                            IconButton(onClick = { /* Handle navigation back or other action */ }) {
                                Icon(imageVector = Icons.Default.Settings, contentDescription = "Settings")
                            }
                        },
                        actions = {
                            // Add any additional actions/icons here if needed
                        }
                    )
                },

                content = {

                    Column(
                        modifier = Modifier
                            .fillMaxSize()
                            .padding(16.dp)
                    ) {
                        Spacer(modifier = Modifier.height(60.dp))
                        ThemeSelection(themeState, systemInDarkMode)
                        // DonateButton()
                        // DeleteDataButton()
                    }
                }
            )
        }
    }
}

@Composable
fun ThemeSelection(themeState: MutableState<ThemeMode>, systemInDarkMode: Boolean) {

    val themes =listOf(
        ThemeMode.Light,
        ThemeMode.Dark,
        ThemeMode.System,
    )

    Column {
        Text(
            "Select App Theme",
            style = MaterialTheme.typography.titleLarge
        )

        for (theme in themes){
            Row(
                modifier = Modifier.fillMaxWidth(),
                verticalAlignment = Alignment.CenterVertically
            ) {
                RadioButton(
                    selected = themeState.value == theme,
                    onClick = {
                        themeState.value = theme
                        when (theme) {
                            ThemeMode.Light -> setLightTheme()
                            ThemeMode.Dark -> setDarkTheme()
                            ThemeMode.System -> setSystemTheme()
                        }
                    }
                )
                Text(
                    text = when (theme) {
                        ThemeMode.Light -> "Light Mode"
                        ThemeMode.Dark -> "Dark Mode"
                        ThemeMode.System -> "System Default"
                    },
                    style = MaterialTheme.typography.bodyMedium,
                    modifier = Modifier.padding(start = 16.dp)
                )
            }
        }
    }

}

private fun setLightTheme() {

    AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_NO)
    Log.d("MyApp", "Light theme applied")
}

private fun setDarkTheme() {

    AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_YES)
    Log.d("MyApp", "Dark theme applied")
}

private fun setSystemTheme() {
    AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_FOLLOW_SYSTEM)
    Log.d("MyApp", "System theme applied")
}

enum class ThemeMode {
    Light,
    Dark,
    System
}

@Preview(showBackground = true)
@Composable
fun SettingsScreenPreview() {
    DiceWeightCalculatorTheme {
        SettingsScreen(rememberNavController())
    }
}